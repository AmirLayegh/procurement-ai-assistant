name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: hackathon-461711
  SERVICE_NAME: procurement-api
  REGION: europe-north2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync

    - name: Run linting
      run: |
        uv run ruff check .
        uv run ruff format --check .
      continue-on-error: true

    - name: Run unit tests
      run: |
        uv run pytest tests/ -v --tb=short
      env:
        PYTHONPATH: .

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          pytest-results.xml
          coverage.xml
        retention-days: 30

  build-and-deploy-backend:
    name: Build and Deploy Backend
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: |
        gcloud auth configure-docker

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --source . \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 8Gi \
          --cpu 4 \
          --set-env-vars="ENVIRONMENT=production,OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }},QDRANT_URL=${{ secrets.QDRANT_URL }},QDRANT_COLLECTION_NAME=gcp-hackathon"

    - name: Get service URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Test deployment
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        curl -f "${{ steps.service-url.outputs.SERVICE_URL }}/health" || exit 1
        
        # Test basic API functionality
        curl -X 'POST' \
          "${{ steps.service-url.outputs.SERVICE_URL }}/api/v1/search/procurement_query" \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{"natural_query": "test query", "limit": 5}' \
          -f || echo "API test failed - this might be expected if data isn't loaded"

  build-frontend:
    name: Build Frontend
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: https://procurement-api-186236752725.europe-north2.run.app

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/
        retention-days: 30

  deploy-frontend:
    name: Deploy Frontend to Firebase
    needs: [build-frontend, build-and-deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy to Firebase
      working-directory: ./frontend
      run: |
        firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive
      env:
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Deployment
    needs: [build-and-deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Notify success
      if: ${{ needs.build-and-deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success' }}
      run: |
        echo "üéâ Deployment successful!"
        echo "Backend: https://procurement-api-186236752725.europe-north2.run.app"
        echo "Frontend: Check Firebase hosting URL"

    - name: Notify failure
      if: ${{ needs.build-and-deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure' }}
      run: |
        echo "‚ùå Deployment failed!"
        exit 1 